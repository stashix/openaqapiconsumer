@using OpenAQApiWrapper.Responses;
@using OpenAQApiWrapper.Entities;

@model PagedResultViewModel<CountriesFilterModel, Country>

<h1 class="display-4">Countries</h1>
@{
    await Html.RenderPartialAsync("_Filter", Model.PagingInfo.CurrentFilter);
}
<hr />
@{
    await Html.RenderPartialAsync("_PagingControls", Model.PagingInfo);
}

<table class="table table-striped table-dark table-hover">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Code</th>
            <th scope="col">Name</th>
            <th scope="col">Locations</th>
            <th scope="col">First Updated</th>
            <th scope="col">Last Updated</th>
            <th scope="col">Parameters</th>
            <th scope="col">Count</th>
            <th scope="col">Cities</th>
            <th scope="col">Sources</th>
            <th scope="col">Measurements</th>
        </tr>
    </thead>
    <tbody>
        @{
            int index = 1;
        }

        @foreach (var country in Model.Results)
        {
            <tr>
                <td>@(((Model.PagingInfo.CurrentFilter.Page - 1) * Model.PagingInfo.CurrentFilter.PageSize) + index)</td>
                <td>@country.Code</td>
                <td>@country.Name</td>
                <td>@country.Locations</td>
                <td>@country.FirstUpdated</td>
                <td>@country.LastUpdated</td>
                <td>@string.Join(", ", country.Parameters.OrderBy(x => x))</td>
                <td>@country.Count</td>
                <td>@country.Cities</td>
                <td>@country.Sources</td>
                <td><a href="@Url.Action("Index", "Measurements", new MeasurementsFilterModel(){ CountryId = country.Code })">Measurements</a></td>
            </tr>

            index++;
        }
    </tbody>
</table>
@{
    await Html.RenderPartialAsync("_PagingControls", Model.PagingInfo);
}
