@using OpenAQApiWrapper.Responses;
@using OpenAQApiWrapper.Entities;

@model PagedResultViewModel<CitiesFilterModel, City>

<h1 class="display-4">Cities</h1>
<hr />
@{
    await Html.RenderPartialAsync("_Filter", Model.PagingInfo.CurrentFilter);
}
<hr />
@{
    await Html.RenderPartialAsync("_PagingControls", Model.PagingInfo);
}
<table class="table table-striped table-dark table-hover">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Country Code</th>
            <th scope="col">Count</th>
            <th scope="col">Locations</th>
            <th scope="col">First Updated</th>
            <th scope="col">Last Updated</th>
            <th scope="col">Parameters</th>
            <th scope="col">Measurements</th>
        </tr>
    </thead>
    <tbody>
        @{
            int index = 1;
        }

        @foreach (var city in Model.Results)
        {
            <tr>
                <td>@(((Model.PagingInfo.CurrentFilter.Page - 1) * Model.PagingInfo.CurrentFilter.PageSize) + index)</td>
                <td>@city.Name</td>
                <td>@city.CountryCode</td>
                <td>@city.Count</td>
                <td>@city.Locations</td>
                <td>@city.FirstUpdated</td>
                <td>@city.LastUpdated</td>
                <td>@string.Join(", ", city.Parameters.OrderBy(x => x))</td>
                <td><a href="@Url.Action("Index", "Measurements", new MeasurementsFilterModel(){ CityName = city.Name, CountryId = city.CountryCode })">Measurements</a></td>
            </tr>

            index++;
        }
    </tbody>
</table>
@{
    await Html.RenderPartialAsync("_PagingControls", Model.PagingInfo);
}
